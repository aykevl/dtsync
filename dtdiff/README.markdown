# Distributed Tree Diff

This is an attempt to implement a system that tracks changes in different
replicas of a tree structure, intended for file systems.

Many of the ideas here are based on this paper:

> D. Malkhi and D. Terry. Concise version vectors in WinFS. In *Distributed
> Computing*, 2005.

Which can be found [on Google Scholar](https://scholar.google.nl/scholar?cluster=15694180381552406021).

This librarly appears pretty stable now, but I cannot guarantee anything.

This library is licensed under the BSD 2-clause license. See `LICENSE.txt` for
details.

## File format

The file format is actually pretty simple. It's a fairly easy-to-parse text
format.

Example file:

    Version: dtsync 0.1
    Content-Type: text/tab-separated-values; charset=utf-8
    Identity: first
    Generation: 2
    Knowledge: second:1,other:12
    
    path	fingerprint	revision
    dir	d/2016-02-15T19:17:51.35414374Z/0	0:1
    dir/file.txt	f/2016-02-15T19:18:18.290458876Z/105	0:1
    file2.html	f/2012-12-18T20:25:21.119862001Z/2046	0:2

The whole file is in MIME format, and must be parsed with an appropriate
library.

`Version`: a more-or-less free format identifier for the software that wrote the
file. Currently it is in a `<name> <version>` format.

`Content-Type`: always the same value. Can be changed in the future so other
formats (binary?) can be used. The only supported charset is utf-8.

`Identity`: an opaque string (roughly limited to `a-zA-Z0-9`, but some other
characters are allowed) serving as identification of this replica. Must be
sufficiently large and randomly generated by the creating replica as to be
unique. An UUID may also be used.

`Generation`: the generation number of this replica. Each scan that a change is
detected, this number is incremented by one.

`Knowledge`: a key-value format to store what changes of other replicas have
been (fully) integrated into this replica.

Then follows the body, just like in HTTP. The format of the body is in TSV, with
escape characters as described in [UniTSV](https://github.com/aykevl/unitsv). In
short, the escape characters are literal `\\`, `\n` and `\t` to encode `\`,
newline, and tab.

The path elements are separated by forward slashes, even on Windows, for
consistency.

The fingerprint is a special microformat. It is of the form `type/modtime/size`
for regular files, and `type/modtime` for other filetypes. In the future, a
permissions field may be added, making it `type/modtime/permissions/size` and
`type/modtime/permissions`. The `type` field is an `f` for regular files or `d`
for directores. Other types are added as appropriate. `modtime` is encoded in
the RFC3339 format with nanoseconds and no timezone. Then follows the `revision`
with an index in the knowledge list (0 means this replica) and a generation
where this file was last changed (where the fingerprint last changed).
