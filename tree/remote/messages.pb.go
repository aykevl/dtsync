// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	FileInfo
	ScanOptions
	ScanProgress
	Error
	Request
	Response
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Command int32

const (
	Command_NONE       Command = 0
	Command_CLOSE      Command = 1
	Command_DATA       Command = 2
	Command_SCAN       Command = 3
	Command_SCANOPTS   Command = 4
	Command_SCANPROG   Command = 5
	Command_MKDIR      Command = 10
	Command_REMOVE     Command = 11
	Command_CREATE     Command = 12
	Command_UPDATE     Command = 13
	Command_COPYSRC    Command = 14
	Command_CREATELINK Command = 15
	Command_UPDATELINK Command = 16
	Command_READLINK   Command = 17
	Command_CHMOD      Command = 18
	// testing commands
	Command_PUTFILE Command = 30
	Command_INFO    Command = 31
	// get and set status (to be removed)
	Command_GETFILE Command = 40
	Command_SETFILE Command = 41
)

var Command_name = map[int32]string{
	0:  "NONE",
	1:  "CLOSE",
	2:  "DATA",
	3:  "SCAN",
	4:  "SCANOPTS",
	5:  "SCANPROG",
	10: "MKDIR",
	11: "REMOVE",
	12: "CREATE",
	13: "UPDATE",
	14: "COPYSRC",
	15: "CREATELINK",
	16: "UPDATELINK",
	17: "READLINK",
	18: "CHMOD",
	30: "PUTFILE",
	31: "INFO",
	40: "GETFILE",
	41: "SETFILE",
}
var Command_value = map[string]int32{
	"NONE":       0,
	"CLOSE":      1,
	"DATA":       2,
	"SCAN":       3,
	"SCANOPTS":   4,
	"SCANPROG":   5,
	"MKDIR":      10,
	"REMOVE":     11,
	"CREATE":     12,
	"UPDATE":     13,
	"COPYSRC":    14,
	"CREATELINK": 15,
	"UPDATELINK": 16,
	"READLINK":   17,
	"CHMOD":      18,
	"PUTFILE":    30,
	"INFO":       31,
	"GETFILE":    40,
	"SETFILE":    41,
}

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}
func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}
func (x *Command) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Command_value, data, "Command")
	if err != nil {
		return err
	}
	*x = Command(value)
	return nil
}
func (Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// See TYPE_* constants in tree/tree.go
type FileType int32

const (
	FileType_UNKNOWN   FileType = 0
	FileType_REGULAR   FileType = 1
	FileType_DIRECTORY FileType = 2
	FileType_SYMLINK   FileType = 3
	FileType_NOTFOUND  FileType = 4
)

var FileType_name = map[int32]string{
	0: "UNKNOWN",
	1: "REGULAR",
	2: "DIRECTORY",
	3: "SYMLINK",
	4: "NOTFOUND",
}
var FileType_value = map[string]int32{
	"UNKNOWN":   0,
	"REGULAR":   1,
	"DIRECTORY": 2,
	"SYMLINK":   3,
	"NOTFOUND":  4,
}

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}
func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (x *FileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileType_value, data, "FileType")
	if err != nil {
		return err
	}
	*x = FileType(value)
	return nil
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DataStatus int32

const (
	DataStatus_NORMAL DataStatus = 0
	DataStatus_FINISH DataStatus = 1
	DataStatus_CANCEL DataStatus = 2
)

var DataStatus_name = map[int32]string{
	0: "NORMAL",
	1: "FINISH",
	2: "CANCEL",
}
var DataStatus_value = map[string]int32{
	"NORMAL": 0,
	"FINISH": 1,
	"CANCEL": 2,
}

func (x DataStatus) Enum() *DataStatus {
	p := new(DataStatus)
	*p = x
	return p
}
func (x DataStatus) String() string {
	return proto.EnumName(DataStatus_name, int32(x))
}
func (x *DataStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataStatus_value, data, "DataStatus")
	if err != nil {
		return err
	}
	*x = DataStatus(value)
	return nil
}
func (DataStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ErrorType int32

const (
	ErrorType_ERR_OTHER      ErrorType = 0
	ErrorType_ERR_NOTFOUND   ErrorType = 1
	ErrorType_ERR_FOUND      ErrorType = 2
	ErrorType_ERR_CHANGED    ErrorType = 3
	ErrorType_ERR_NO_DIR     ErrorType = 10
	ErrorType_ERR_NO_REGULAR ErrorType = 11
	ErrorType_ERR_NO_SYMLINK ErrorType = 12
)

var ErrorType_name = map[int32]string{
	0:  "ERR_OTHER",
	1:  "ERR_NOTFOUND",
	2:  "ERR_FOUND",
	3:  "ERR_CHANGED",
	10: "ERR_NO_DIR",
	11: "ERR_NO_REGULAR",
	12: "ERR_NO_SYMLINK",
}
var ErrorType_value = map[string]int32{
	"ERR_OTHER":      0,
	"ERR_NOTFOUND":   1,
	"ERR_FOUND":      2,
	"ERR_CHANGED":    3,
	"ERR_NO_DIR":     10,
	"ERR_NO_REGULAR": 11,
	"ERR_NO_SYMLINK": 12,
}

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}
func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (x *ErrorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorType_value, data, "ErrorType")
	if err != nil {
		return err
	}
	*x = ErrorType(value)
	return nil
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FileInfo struct {
	Path             []string  `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	Type             *FileType `protobuf:"varint,2,opt,name=type,enum=remote.FileType" json:"type,omitempty"`
	Mode             *uint32   `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	HasMode          *uint32   `protobuf:"varint,4,opt,name=hasMode" json:"hasMode,omitempty"`
	ModTime          *int64    `protobuf:"zigzag64,5,opt,name=modTime" json:"modTime,omitempty"`
	Size             *int64    `protobuf:"zigzag64,6,opt,name=size" json:"size,omitempty"`
	HashType         *uint32   `protobuf:"varint,7,opt,name=hashType" json:"hashType,omitempty"`
	HashData         []byte    `protobuf:"bytes,8,opt,name=hashData" json:"hashData,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileInfo) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *FileInfo) GetType() FileType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FileType_UNKNOWN
}

func (m *FileInfo) GetMode() uint32 {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return 0
}

func (m *FileInfo) GetHasMode() uint32 {
	if m != nil && m.HasMode != nil {
		return *m.HasMode
	}
	return 0
}

func (m *FileInfo) GetModTime() int64 {
	if m != nil && m.ModTime != nil {
		return *m.ModTime
	}
	return 0
}

func (m *FileInfo) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *FileInfo) GetHashType() uint32 {
	if m != nil && m.HashType != nil {
		return *m.HashType
	}
	return 0
}

func (m *FileInfo) GetHashData() []byte {
	if m != nil {
		return m.HashData
	}
	return nil
}

type ScanOptions struct {
	Exclude          []string `protobuf:"bytes,1,rep,name=exclude" json:"exclude,omitempty"`
	Include          []string `protobuf:"bytes,2,rep,name=include" json:"include,omitempty"`
	Follow           []string `protobuf:"bytes,3,rep,name=follow" json:"follow,omitempty"`
	Perms            *uint32  `protobuf:"varint,5,opt,name=perms" json:"perms,omitempty"`
	Replica          *string  `protobuf:"bytes,6,opt,name=replica" json:"replica,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ScanOptions) Reset()                    { *m = ScanOptions{} }
func (m *ScanOptions) String() string            { return proto.CompactTextString(m) }
func (*ScanOptions) ProtoMessage()               {}
func (*ScanOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScanOptions) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *ScanOptions) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *ScanOptions) GetFollow() []string {
	if m != nil {
		return m.Follow
	}
	return nil
}

func (m *ScanOptions) GetPerms() uint32 {
	if m != nil && m.Perms != nil {
		return *m.Perms
	}
	return 0
}

func (m *ScanOptions) GetReplica() string {
	if m != nil && m.Replica != nil {
		return *m.Replica
	}
	return ""
}

type ScanProgress struct {
	Total            *uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Done             *uint64  `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	Path             []string `protobuf:"bytes,3,rep,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ScanProgress) Reset()                    { *m = ScanProgress{} }
func (m *ScanProgress) String() string            { return proto.CompactTextString(m) }
func (*ScanProgress) ProtoMessage()               {}
func (*ScanProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ScanProgress) GetTotal() uint64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ScanProgress) GetDone() uint64 {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return 0
}

func (m *ScanProgress) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type Error struct {
	Type             *ErrorType `protobuf:"varint,1,opt,name=type,enum=remote.ErrorType" json:"type,omitempty"`
	Message          *string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Error) GetType() ErrorType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ErrorType_ERR_OTHER
}

func (m *Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Request struct {
	Command          *Command    `protobuf:"varint,1,opt,name=command,enum=remote.Command" json:"command,omitempty"`
	RequestId        *uint64     `protobuf:"varint,2,opt,name=requestId" json:"requestId,omitempty"`
	FileInfo1        *FileInfo   `protobuf:"bytes,3,opt,name=fileInfo1" json:"fileInfo1,omitempty"`
	FileInfo2        *FileInfo   `protobuf:"bytes,4,opt,name=fileInfo2" json:"fileInfo2,omitempty"`
	Name             *string     `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Data             []byte      `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	Status           *DataStatus `protobuf:"varint,7,opt,name=status,enum=remote.DataStatus" json:"status,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Request) GetCommand() Command {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return Command_NONE
}

func (m *Request) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *Request) GetFileInfo1() *FileInfo {
	if m != nil {
		return m.FileInfo1
	}
	return nil
}

func (m *Request) GetFileInfo2() *FileInfo {
	if m != nil {
		return m.FileInfo2
	}
	return nil
}

func (m *Request) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Request) GetStatus() DataStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DataStatus_NORMAL
}

type Response struct {
	Command          *Command  `protobuf:"varint,1,opt,name=command,enum=remote.Command" json:"command,omitempty"`
	RequestId        *uint64   `protobuf:"varint,2,opt,name=requestId" json:"requestId,omitempty"`
	Error            *Error    `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	FileInfo         *FileInfo `protobuf:"bytes,4,opt,name=fileInfo" json:"fileInfo,omitempty"`
	ParentInfo       *FileInfo `protobuf:"bytes,5,opt,name=parentInfo" json:"parentInfo,omitempty"`
	Data             []byte    `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetCommand() Command {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return Command_NONE
}

func (m *Response) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *Response) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *Response) GetParentInfo() *FileInfo {
	if m != nil {
		return m.ParentInfo
	}
	return nil
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "remote.FileInfo")
	proto.RegisterType((*ScanOptions)(nil), "remote.ScanOptions")
	proto.RegisterType((*ScanProgress)(nil), "remote.ScanProgress")
	proto.RegisterType((*Error)(nil), "remote.Error")
	proto.RegisterType((*Request)(nil), "remote.Request")
	proto.RegisterType((*Response)(nil), "remote.Response")
	proto.RegisterEnum("remote.Command", Command_name, Command_value)
	proto.RegisterEnum("remote.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("remote.DataStatus", DataStatus_name, DataStatus_value)
	proto.RegisterEnum("remote.ErrorType", ErrorType_name, ErrorType_value)
}

var fileDescriptor0 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0xbb, 0x6e, 0xdb, 0x48,
	0x14, 0x5d, 0xca, 0xd4, 0x83, 0x57, 0x0f, 0x8f, 0x59, 0xa9, 0x58, 0xd8, 0x86, 0x76, 0x0b, 0xad,
	0x0a, 0x63, 0xe3, 0x2e, 0x25, 0x41, 0x52, 0x12, 0x61, 0x69, 0x46, 0x20, 0xa9, 0x04, 0xae, 0x0c,
	0x42, 0x1a, 0xdb, 0x02, 0x24, 0x92, 0x21, 0x69, 0xe4, 0x51, 0xe7, 0x2b, 0xf2, 0x1f, 0xf9, 0x87,
	0x7c, 0x50, 0x3e, 0x20, 0xf7, 0x0e, 0x49, 0x3f, 0x80, 0xb8, 0x49, 0x37, 0xe7, 0xcc, 0x7d, 0x9d,
	0x73, 0x67, 0x60, 0x70, 0x90, 0x79, 0x1e, 0xdd, 0xc9, 0xfc, 0x22, 0xcd, 0x92, 0x22, 0x31, 0x5b,
	0x99, 0x3c, 0x24, 0x85, 0x1c, 0x7d, 0xd3, 0xa0, 0x33, 0xdd, 0xed, 0xa5, 0x17, 0xdf, 0x26, 0x66,
	0x0f, 0xf4, 0x34, 0x2a, 0xee, 0x87, 0xda, 0xf9, 0xd1, 0xd8, 0x30, 0x4f, 0x41, 0x2f, 0x3e, 0xa7,
	0x72, 0xd8, 0x38, 0xd7, 0xc6, 0x83, 0x4b, 0x76, 0x51, 0x66, 0x5c, 0x50, 0x74, 0x88, 0x3c, 0x45,
	0x1f, 0x92, 0xad, 0x1c, 0x1e, 0xe1, 0x7d, 0xdf, 0x3c, 0x86, 0xf6, 0x7d, 0x94, 0x2f, 0x89, 0xd0,
	0x6b, 0x02, 0xaf, 0xc3, 0xdd, 0x41, 0x0e, 0x9b, 0x48, 0x98, 0x14, 0x9f, 0xef, 0xbe, 0xc8, 0x61,
	0x4b, 0x21, 0x06, 0x1d, 0x8c, 0xbf, 0xa7, 0x4a, 0xc3, 0xb6, 0x4a, 0xa8, 0x18, 0x27, 0x2a, 0xa2,
	0x61, 0x07, 0x99, 0xde, 0xe8, 0x06, 0xba, 0xc1, 0x26, 0x8a, 0x45, 0x5a, 0xec, 0x92, 0x38, 0xa7,
	0x8a, 0xf2, 0xd3, 0x66, 0xff, 0x80, 0x2d, 0xca, 0x09, 0x91, 0xd8, 0xc5, 0x25, 0xd1, 0x50, 0xc4,
	0x00, 0x5a, 0xb7, 0xc9, 0x7e, 0x9f, 0x7c, 0xc4, 0xa1, 0x08, 0xf7, 0xa1, 0x99, 0xca, 0xec, 0x90,
	0xab, 0x09, 0xd4, 0x48, 0x99, 0x4c, 0xf7, 0xbb, 0x4d, 0xa4, 0x86, 0x30, 0x46, 0x6f, 0xa1, 0x47,
	0x0d, 0x56, 0x59, 0x72, 0x97, 0xa1, 0x3f, 0x14, 0x5f, 0x24, 0x45, 0xb4, 0xc7, 0xfa, 0xda, 0x58,
	0xa7, 0x89, 0xb7, 0x49, 0x5c, 0x3a, 0xa0, 0x3f, 0xba, 0xa3, 0x4a, 0x63, 0x6a, 0xd3, 0xcd, 0xb2,
	0x24, 0x33, 0xcf, 0x2a, 0x9b, 0x34, 0x65, 0xd3, 0x49, 0x6d, 0x93, 0xba, 0x54, 0x3e, 0x91, 0x11,
	0xa5, 0xf9, 0xaa, 0x90, 0x31, 0xfa, 0xa1, 0x41, 0xdb, 0x97, 0x1f, 0x1e, 0x64, 0x5e, 0x98, 0xe7,
	0xd0, 0xde, 0x24, 0x87, 0x43, 0x14, 0x6f, 0xab, 0x02, 0xc7, 0x75, 0x01, 0xbb, 0xa4, 0xcd, 0x13,
	0x30, 0xb2, 0x32, 0xd8, 0xdb, 0x56, 0x93, 0xfc, 0x03, 0xc6, 0x6d, 0xb5, 0xb3, 0x37, 0xca, 0xfe,
	0xee, 0xcb, 0xf5, 0xa8, 0x65, 0x3e, 0x0b, 0xba, 0x54, 0x2b, 0xf9, 0x5d, 0x10, 0x6a, 0x8a, 0xa3,
	0x6a, 0x43, 0x86, 0xd2, 0x4b, 0xee, 0x93, 0x39, 0x3d, 0x73, 0x04, 0xad, 0xbc, 0x88, 0x8a, 0x87,
	0x5c, 0xed, 0x67, 0x70, 0x69, 0xd6, 0xd9, 0xb4, 0xa1, 0x40, 0xdd, 0x8c, 0xbe, 0xe3, 0xf3, 0xf1,
	0x65, 0x9e, 0xe2, 0x7a, 0xe4, 0x9f, 0x69, 0xf9, 0x1b, 0x9a, 0x92, 0xac, 0xaa, 0x74, 0xf4, 0x5f,
	0xf8, 0x87, 0x33, 0x74, 0x6a, 0x11, 0xaf, 0x6a, 0xf8, 0x17, 0x20, 0x8d, 0x32, 0x19, 0x17, 0x2a,
	0xaa, 0xf9, 0xba, 0xd2, 0x27, 0x6d, 0x93, 0x9f, 0xb8, 0x82, 0x7a, 0xa8, 0x0e, 0xe8, 0x5c, 0x70,
	0x97, 0xfd, 0x65, 0x1a, 0xd0, 0xb4, 0x17, 0x22, 0x70, 0x99, 0x46, 0xa4, 0x63, 0x85, 0x16, 0x6b,
	0xd0, 0x29, 0xb0, 0x2d, 0xce, 0x8e, 0xb0, 0x44, 0x87, 0x4e, 0x62, 0x15, 0x06, 0x4c, 0xaf, 0xd1,
	0xca, 0x17, 0x33, 0xd6, 0xa4, 0xd4, 0xe5, 0x95, 0xe3, 0xf9, 0x0c, 0x4c, 0x80, 0x96, 0xef, 0x2e,
	0xc5, 0x3b, 0x97, 0x75, 0xe9, 0x6c, 0xfb, 0xae, 0x15, 0xba, 0xac, 0x47, 0xe7, 0xf5, 0xca, 0xa1,
	0x73, 0xdf, 0xec, 0x62, 0x7b, 0xb1, 0xba, 0x0e, 0x7c, 0x9b, 0x0d, 0xf0, 0xd5, 0x42, 0x19, 0xb4,
	0xf0, 0xf8, 0x15, 0x3b, 0x26, 0x5c, 0x06, 0x2a, 0xcc, 0xa8, 0x13, 0x5e, 0x3b, 0x0a, 0x9d, 0xa8,
	0x21, 0xe7, 0x4b, 0xe1, 0x30, 0x93, 0xaa, 0xac, 0xd6, 0xe1, 0xd4, 0x5b, 0xb8, 0xec, 0x94, 0xe6,
	0xf4, 0xf8, 0x54, 0xb0, 0x33, 0xa2, 0x67, 0x6e, 0x49, 0x8f, 0x09, 0x04, 0x15, 0xf8, 0x6f, 0xc2,
	0xcb, 0xcf, 0xae, 0x9e, 0x25, 0x5e, 0xac, 0xf9, 0x15, 0x17, 0xef, 0x39, 0x2a, 0x47, 0xe0, 0xbb,
	0xb3, 0xf5, 0xc2, 0xf2, 0x51, 0x7b, 0x1f, 0x0c, 0x54, 0xe2, 0xda, 0xa1, 0xf0, 0xaf, 0xd1, 0x00,
	0xaa, 0x70, 0xbd, 0x54, 0xdd, 0x95, 0x07, 0x5c, 0x84, 0x53, 0xb1, 0xe6, 0x0e, 0xd3, 0x27, 0xff,
	0x03, 0x3c, 0x3d, 0x06, 0x12, 0xc8, 0x85, 0xbf, 0xb4, 0x16, 0x58, 0x10, 0xcf, 0x53, 0x8f, 0x7b,
	0xc1, 0x1c, 0xeb, 0x91, 0x09, 0x16, 0xb7, 0xdd, 0x05, 0x6b, 0x4c, 0xbe, 0x6a, 0x60, 0x3c, 0x7d,
	0x0d, 0xec, 0xe4, 0xfa, 0xfe, 0x8d, 0x08, 0xe7, 0xae, 0x8f, 0x49, 0x0c, 0x7a, 0x04, 0x1f, 0x1b,
	0x68, 0x75, 0x40, 0x09, 0x1b, 0xf8, 0x95, 0xba, 0x04, 0xed, 0xb9, 0xc5, 0x67, 0xae, 0x83, 0xe3,
	0xa0, 0x55, 0x65, 0xc6, 0x4d, 0xe9, 0xbd, 0x09, 0x83, 0x0a, 0xd7, 0x72, 0xba, 0xcf, 0xb8, 0x5a,
	0x46, 0xef, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0xd1, 0x4a, 0x00, 0x0f, 0x05, 0x00, 0x00,
}
